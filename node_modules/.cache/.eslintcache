[{"/Users/giulianicarla/Documents/GitHub/CPA/src/index.tsx":"1","/Users/giulianicarla/Documents/GitHub/CPA/src/reportWebVitals.ts":"2","/Users/giulianicarla/Documents/GitHub/CPA/src/App.tsx":"3","/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/index.tsx":"4","/Users/giulianicarla/Documents/GitHub/CPA/src/components/loader/index.tsx":"5","/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/state.ts":"6","/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/conf.ts":"7","/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/renderer.ts":"8","/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/game.ts":"9"},{"size":500,"mtime":1682082331998,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1682082332000,"results":"12","hashOfConfig":"11"},{"size":629,"mtime":1682082331980,"results":"13","hashOfConfig":"11"},{"size":6050,"mtime":1682087691018,"results":"14","hashOfConfig":"11"},{"size":176,"mtime":1682082331997,"results":"15","hashOfConfig":"11"},{"size":7370,"mtime":1682087901994,"results":"16","hashOfConfig":"11"},{"size":134,"mtime":1682082331986,"results":"17","hashOfConfig":"11"},{"size":6006,"mtime":1682278023476,"results":"18","hashOfConfig":"11"},{"size":878,"mtime":1682083498621,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"nvu9g3",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/giulianicarla/Documents/GitHub/CPA/src/index.tsx",[],["41","42"],"/Users/giulianicarla/Documents/GitHub/CPA/src/reportWebVitals.ts",[],"/Users/giulianicarla/Documents/GitHub/CPA/src/App.tsx",[],"/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/index.tsx",["43","44","45","46"],"import * as conf from './conf'\nimport { useRef, useEffect } from 'react'\nimport { State, step, click, mouseMove, endOfGame, clickEnd } from './state'\nimport { render/*, RenderProps*/ } from './renderer'\n\nimport * as jeu from './game'\n\nconst randomInt = (max: number) => Math.floor(Math.random() * max)\nconst randomSign = () => Math.sign(Math.random() - 0.5)\n\nconst initCanvas =\n  (iterate: (ctx: CanvasRenderingContext2D) => void) =>\n  (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n    requestAnimationFrame(() => iterate(ctx))\n  }\n\n\n//Initialisation des plateformes (global car on les connait toutes Ã  l'avance)\nlet ensPlat = [new jeu.Plateforme({x : 400, y:400, longueur:200, largeur:70})]\n\n//new jeu.Plateforme({x : 300, y:400, longueur:200, largeur:70}),\n//new jeu.Plateforme({x : 200, y:300, longueur:200, largeur:70}),new jeu.Plateforme({x : 100, y:200, longueur:200, largeur:70}[400, 520, 200, 70],[300, 400, 200, 70],[200, 300, 200, 70],[100, 200, 200, 70]]\n\nlet i = -1\nlet j = -1\nconst Canvas = ({ height, width }: { height: number; width: number }) => {\n  const initialState: State = {\n    joueur: {\n      pos: {\n        x: 50,\n        y: 50,\n      },\n      HP: 3,\n      speed: 10,\n      velX: 0,\n      velY: 0,\n    },\n\n    pos: new Array(20).fill(1).map((_) => ({\n      life: conf.BALLLIFE,\n      coord: {\n        x: randomInt(width - 120) + 60,\n        y: randomInt(height - 120) + 60,\n        dx: 4 * randomSign(),\n        dy: 4 * randomSign(),\n      },\n    })),\n    player: {\n      life: conf.PLAYERLIFE,\n      coord: {\n        x: randomInt(width - 120) + 60,\n        y: randomInt(height - 120) + 60,\n        dx: 0,\n        dy: 0,\n      },\n    },\n    size: { height, width },\n    endOfGame: true,\n    platforms: ensPlat,\n  }\n\n  const ref = useRef<any>()\n  const state = useRef<State>(initialState)\n  const scaleRef = useRef<number>(1)\n  const posRef = useRef<{ x: number; y: number }>({ x: 0, y: 0 })\n  const drag = useRef<boolean>(false)\n  const dragStart = useRef<{ x: number; y: number }>({ x: 0, y: 0 })\n  const downTS = useRef<number>(Date.now())\n\n  const iterate = (ctx: CanvasRenderingContext2D) => {\n    /*const fps = 60;\n    const interval = 1000 / fps;\n    let lastRenderTime = 0;\n\n    setInterval(() => {\n      const currentTime = Date.now();\n      const elapsed = currentTime - lastRenderTime;\n      if (elapsed > interval) {\n        lastRenderTime = currentTime;\n\n        // votre code de rendu de canvas ici\n      }\n  }, interval);*/\n\n\n\n    state.current = step(state.current)\n    state.current.endOfGame = !endOfGame(state.current)\n    render(ctx, /*{\n      pos: posRef.current,\n      scale: scaleRef.current,\n    },*/ensPlat)(state.current)\n    if (!state.current.endOfGame) requestAnimationFrame(() => iterate(ctx))\n  }\n\n  const onClick = (e: PointerEvent) => {\n    state.current = click(state.current)(e)\n  }\n\n  const onClickEnd = (e: PointerEvent) => {\n    state.current = clickEnd(state.current)(e)\n  }\n\n  const onMove = (e: PointerEvent) => {\n    state.current = mouseMove(state.current)(e)\n  }\n\n  useEffect(() => {\n    const onWheel = (e: WheelEvent) => {\n      const { offsetX, offsetY, deltaY } = e\n      const zoomFactor = 0.98\n      if (scaleRef.current > 0.5 || deltaY < 0) {\n        const factor = e.deltaY > 0 ? zoomFactor : 1 / zoomFactor\n        scaleRef.current = scaleRef.current * factor\n        const dx = (offsetX / scaleRef.current) * (factor - 1)\n        const dy = (offsetY / scaleRef.current) * (factor - 1)\n        posRef.current = {\n          x: posRef.current.x - dx,\n          y: posRef.current.y - dy,\n        }\n      }\n    }\n    const onDragStart = (e: PointerEvent) => {\n      const { x, y } = e\n      dragStart.current = { x, y }\n      drag.current = true\n      downTS.current = Date.now()\n    }\n    const onDragEnd = (_e: any) => (drag.current = false)\n    const onDragMove = (e: PointerEvent) => {\n      if (drag.current) {\n        const { x, y } = e\n        const scale = scaleRef.current\n        const pos = posRef.current\n        posRef.current = {\n          x: (x - dragStart.current.x) / scale + pos.x,\n          y: (y - dragStart.current.y) / scale + pos.y,\n        }\n        dragStart.current = { x, y }\n      }\n    }\n\n    ref.current.addEventListener('mousedown', onClick)\n    ref.current.addEventListener('mouseup', onClickEnd)\n    ref.current.addEventListener('mousemove', onMove)\n    ref.current.addEventListener('wheel', onWheel)\n    ref.current.addEventListener('mouseupoutside', onDragEnd)\n    ref.current.addEventListener('touchendoutside', onDragEnd)\n    ref.current.addEventListener('mouseup', onClick)\n    ref.current.addEventListener('mousemove', onDragMove)\n    ref.current.addEventListener('mousedown', onDragStart)\n    ref.current.addEventListener('touchstart', onDragStart)\n    ref.current.addEventListener('mouseup', onDragEnd)\n    ref.current.addEventListener('touchend', onDragEnd)\n    ref.current.addEventListener('mousemove', onDragMove)\n    ref.current.addEventListener('touchmove', onDragMove)\n    initCanvas(iterate)(ref.current)\n\n    return () => {\n      ref.current.removeEventListener('mousedown', onClick)\n      ref.current.removeEventListener('mouseup', onClickEnd)\n      ref.current.removeEventListener('mousemove', onMove)\n      ref.current.removeEventListener('wheel', onWheel)\n      ref.current.removeEventListener('mouseupoutside', onDragEnd)\n      ref.current.removeEventListener('touchendoutside', onDragEnd)\n      ref.current.removeEventListener('mouseup', onClick)\n      ref.current.removeEventListener('mousemove', onDragMove)\n      ref.current.removeEventListener('mousedown', onDragStart)\n      ref.current.removeEventListener('touchstart', onDragStart)\n      ref.current.removeEventListener('mouseup', onDragEnd)\n      ref.current.removeEventListener('touchend', onDragEnd)\n      ref.current.removeEventListener('mousemove', onDragMove)\n      ref.current.removeEventListener('touchmove', onDragMove)\n    }\n  }, [])\n  return <canvas {...{ height, width, ref }} />\n}\n\nexport default Canvas\n","/Users/giulianicarla/Documents/GitHub/CPA/src/components/loader/index.tsx",[],"/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/state.ts",["47","48","49","50","51","52","53","54"],"import * as conf from './conf'\nimport * as jeu from './game'\n\ntype Player = jeu.Player\ntype Platform = jeu.Plateforme\n\n\ntype Coord = { x: number; y: number; dx: number; dy: number }\ntype Ball = { coord: Coord; life: number; invincible?: number }\ntype Size = { height: number; width: number }\nexport type State = {\n  pos: Array<Ball>\n  press?: { start: number; pos: { x: number; y: number } }\n  size: Size\n  player: Ball\n  endOfGame: boolean\n  joueur : Player\n  platforms: Array<Platform>\n}\n\nexport var cptMarche = -1\n\nconst jump = (state: State) =>\n  state.joueur.velY = -20;\n\n\n\nconst dist2 = (o1: Coord, o2: Coord) =>\n  Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2)\n\nexport const clickEnd =\n  (state: State) =>\n  (_event: PointerEvent): State => {\n    if (state.press) {\n      const t = (Date.now() - state.press.start) / 20000\n      const dx = state.player.coord.x - state.press.pos.x\n      const dy = state.player.coord.y - state.press.pos.y\n      state.player.coord.dx = state.player.coord.dx + dx * t\n      state.player.coord.dy = state.player.coord.dy + dy * t\n      state.press = undefined\n    }\n    return state\n  }\n\nexport const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX: x, offsetY: y } = event\n    state.press = { start: Date.now(), pos: { x, y } }\n    return state\n  }\n\nconst collide = (o1: Coord, o2: Coord) =>\n  dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2)\n\nconst collideBoing = (p1: Coord, p2: Coord) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS)\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS)\n  const gx = -ny\n  const gy = nx\n\n  const v1g = gx * p1.dx + gy * p1.dy\n  const v2n = nx * p2.dx + ny * p2.dy\n  const v2g = gx * p2.dx + gy * p2.dy\n  const v1n = nx * p1.dx + ny * p1.dy\n  p1.dx = nx * v2n + gx * v1g\n  p1.dy = ny * v2n + gy * v1g\n  p2.dx = nx * v1n + gx * v2g\n  p2.dy = ny * v1n + gy * v2g\n  p1.x += p1.dx\n  p1.y += p1.dy\n  p2.x += p2.dx\n  p2.y += p2.dy\n}\n\nlet cpt = 0\n\nlet t = 0.0;\n\nlet currentTime = Date.now()\n\nlet friction = 0.95\n\nlet gravity = 1.25\n\nlet auSol = false\n\nlet currenty = 0\n\nlet previousy = 0\n\nexport const collide_plat = (state: State) => {\n  console.log(state.joueur.pos.x +\" \"+ state.joueur.pos.y )\n  for(let i=0; i<state.platforms.length;i++){\n\n    /*gauche*/\n    if (state.joueur.pos.x > state.platforms[i].x && state.joueur.pos.y >=state.platforms[i].y \n      && state.joueur.pos.y<=(state.platforms[i].y + state.platforms[i].largeur)&& state.joueur.pos.x <(state.platforms[i].x +10)){\n        state.joueur.pos.x =state.platforms[i].x;\n    }\n    /*bas*/\n    if (state.joueur.pos.y < (state.platforms[i].y+state.platforms[i].largeur) && state.joueur.pos.x >state.platforms[i].x \n      && state.joueur.pos.x<(state.platforms[i].x + state.platforms[i].longueur)&& state.joueur.pos.y> (state.platforms[i].y+state.platforms[i].largeur-35)){\n        state.joueur.pos.y =state.platforms[i].y + state.platforms[i].largeur;\n    }\n    /*droite*/\n    if (state.joueur.pos.x < (state.platforms[i].x +state.platforms[i].longueur )&& state.joueur.pos.y >=state.platforms[i].y \n      && state.joueur.pos.y<=(state.platforms[i].y + state.platforms[i].largeur) && state.joueur.pos.x > (state.platforms[i].x +state.platforms[i].longueur -10) ){\n        state.joueur.pos.x =state.platforms[i].x +state.platforms[i].longueur;\n    }\n    /*haut*/\n    if (state.joueur.pos.y > state.platforms[i].y && state.joueur.pos.x > state.platforms[i].x \n      && state.joueur.pos.x < (state.platforms[i].x + state.platforms[i].longueur) && (state.joueur.pos.y <state.platforms[i].y +35)){\n        state.joueur.pos.y =state.platforms[i].y;\n        state.joueur.velY=0;\n    }\n  }\n\n}\n\n\n\n\nexport const step = (state: State) => {\n  console.log(state.platforms)\n\n  currenty = state.joueur.pos.y\n\n  let newTime = Date.now();\n  let frameTime = newTime - currentTime;\n  currentTime = newTime;\n   \n\n\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map((p2) => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--\n          p1.invincible = 20\n        }\n        if (!p2.invincible) {\n          p2.life--\n          p2.invincible = 20\n        }\n        collideBoing(p1.coord, p2.coord)\n      }\n    })\n  })\n\n  //if (frameTime > 1000/60) {\n\n    //newTime = currentTime - (frameTime % (1000/60));\n\n    document.addEventListener('keydown', (event) => {\n      var name = event.key;\n  \n      if(name==='z'){\n        if (auSol) {\n          jump(state);\n          //state.joueur.velY = -7;\n        }\n        //state.joueur.pos = perso.moveUp(state.joueur,frameTime)\n      }\n      /*\n      if(name==='s'){\n        if (state.joueur.velY < state.joueur.speed) {\n          state.joueur.velY=7;\n        }\n         //state.joueur.pos=perso.moveDown(state.joueur,frameTime)\n      }\n      */\n      if(name==='q'){\n        if (state.joueur.velX > -state.joueur.speed) {\n          state.joueur.velX=-7;\n          cptMarche++\n        }\n         //state.joueur.pos= perso.moveLeft(state.joueur,frameTime)\n      }\n      if(name==='d'){\n        if (state.joueur.velX < state.joueur.speed) {\n          state.joueur.velX=7;\n          cptMarche++\n        }\n        // state.joueur.pos= perso.moveRight(state.joueur,frameTime)\n      }\n  \n    }, false);\n\n    document.addEventListener('keyup', (event) => {\n      var name = event.key;\n  \n      /*if(name==='z'){\n        if (state.joueur.velY > -state.joueur.speed) {\n          state.joueur.velY = 0;\n        }\n        //state.joueur.pos = perso.moveUp(state.joueur,frameTime)\n      }\n      if(name==='s'){\n        if (state.joueur.velY < state.joueur.speed) {\n          state.joueur.velY=0;\n        }\n         //state.joueur.pos=perso.moveDown(state.joueur,frameTime)\n      }*/\n      if(name==='q'){\n        if (state.joueur.velX > -state.joueur.speed) {\n          state.joueur.velX=0;\n          cptMarche = -1\n        }\n         //state.joueur.pos= perso.moveLeft(state.joueur,frameTime)\n      }\n      if(name==='d'){\n        if (state.joueur.velX < state.joueur.speed) {\n          state.joueur.velX=0;\n          cptMarche = -1\n        }\n        // state.joueur.pos= perso.moveRight(state.joueur,frameTime)\n      }\n  \n    }, false);\n\n\n  //}\n\n  //state.joueur.velY *= friction;\n  state.joueur.pos.y += state.joueur.velY;\n  //state.joueur.velX *= friction;\n  state.joueur.pos.x += state.joueur.velX;\n\n\n  \n  \n  state.joueur.velY += gravity;\n\n  if(state.joueur.pos.y > 520){\n    state.joueur.pos.y = 520\n  }\n  collide_plat(state);\n  console.log(state.joueur.pos.y)\n\n  if(currenty == previousy){\n    auSol = true\n  }\n  else{\n    auSol = false\n  }\n\n  previousy = currenty\n\n\n  \n\n  if (state.player.invincible) state.player.invincible--\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, state.player.coord)\n      if (!state.player.invincible) {\n        state.player.life--\n        state.player.invincible = 20\n      }\n      if (!p1.invincible) {\n        p1.life--\n        p1.invincible = 20\n      }\n    }\n  })\n  return {\n    ...state,\n    //player: iterate(state.joueur)(state.size)(state.player),\n    //pos: state.pos.map(iterate(state.joueur)(state.size)).filter((p) => p.life > 0),\n  }\n}\n\nexport const mouseMove =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    return state\n  }\n\nexport const endOfGame = (state: State): boolean =>\n  state.player.life > 0 && state.pos.length > 0\n","/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/conf.ts",[],"/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/renderer.ts",["55","56","57","58"],"/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/game.ts",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":26,"column":5,"nodeType":"65","messageId":"66","endLine":26,"endColumn":6},{"ruleId":"63","severity":1,"message":"67","line":27,"column":5,"nodeType":"65","messageId":"66","endLine":27,"endColumn":6},{"ruleId":"68","severity":1,"message":"69","line":175,"column":11,"nodeType":"65","endLine":175,"endColumn":18},{"ruleId":"68","severity":1,"message":"70","line":177,"column":6,"nodeType":"71","endLine":177,"endColumn":8,"suggestions":"72"},{"ruleId":"63","severity":1,"message":"73","line":76,"column":5,"nodeType":"65","messageId":"66","endLine":76,"endColumn":8},{"ruleId":"63","severity":1,"message":"74","line":78,"column":5,"nodeType":"65","messageId":"66","endLine":78,"endColumn":6},{"ruleId":"63","severity":1,"message":"75","line":82,"column":5,"nodeType":"65","messageId":"66","endLine":82,"endColumn":13},{"ruleId":"63","severity":1,"message":"76","line":130,"column":7,"nodeType":"65","messageId":"66","endLine":130,"endColumn":16},{"ruleId":"77","severity":1,"message":"78","line":135,"column":30,"nodeType":"79","messageId":"80","endLine":135,"endColumn":32},{"ruleId":"77","severity":1,"message":"78","line":136,"column":31,"nodeType":"79","messageId":"80","endLine":136,"endColumn":33},{"ruleId":"81","severity":1,"message":"82","line":241,"column":15,"nodeType":"83","messageId":"84","endLine":241,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":254,"column":25,"nodeType":"79","messageId":"80","endLine":254,"endColumn":27},{"ruleId":"63","severity":1,"message":"85","line":1,"column":13,"nodeType":"65","messageId":"66","endLine":1,"endColumn":17},{"ruleId":"63","severity":1,"message":"86","line":20,"column":7,"nodeType":"65","messageId":"66","endLine":20,"endColumn":13},{"ruleId":"81","severity":1,"message":"82","line":169,"column":14,"nodeType":"83","messageId":"84","endLine":169,"endColumn":16},{"ruleId":"63","severity":1,"message":"87","line":188,"column":7,"nodeType":"65","messageId":"66","endLine":188,"endColumn":19},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"@typescript-eslint/no-unused-vars","'i' is assigned a value but never used.","Identifier","unusedVar","'j' is assigned a value but never used.","react-hooks/exhaustive-deps","The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'iterate'. Either include it or remove the dependency array.","ArrayExpression",["90"],"'cpt' is assigned a value but never used.","'t' is assigned a value but never used.","'friction' is assigned a value but never used.","'frameTime' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'conf' is defined but never used.","'COLORS' is assigned a value but never used.","'computeColor' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [iterate]",{"range":"93","text":"94"},[5972,5974],"[iterate]"]