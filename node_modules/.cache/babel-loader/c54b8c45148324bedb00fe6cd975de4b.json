{"ast":null,"code":"import * as conf from './conf';\n//const jump = (joueur:Player) =>\n\nconst dist2 = (o1, o2) => Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2);\nconst iterate = player => bound => ball => {\n  const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible;\n  const coord = ball.coord;\n  const dx = (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS ? -coord.dx : coord.dx) * conf.FRICTION;\n  const dy = (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS ? -coord.dy : coord.dy) * conf.FRICTION;\n  if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE) return {\n    ...ball,\n    invincible,\n    coord: {\n      ...coord,\n      dx: 0,\n      dy: 0\n    }\n  };\n  return {\n    ...ball,\n    invincible,\n    coord: {\n      x: coord.x + dx,\n      y: coord.y + dy,\n      dx,\n      dy\n    }\n  };\n};\nexport const clickEnd = state => _event => {\n  if (state.press) {\n    const t = (Date.now() - state.press.start) / 20000;\n    const dx = state.player.coord.x - state.press.pos.x;\n    const dy = state.player.coord.y - state.press.pos.y;\n    state.player.coord.dx = state.player.coord.dx + dx * t;\n    state.player.coord.dy = state.player.coord.dy + dy * t;\n    state.press = undefined;\n  }\n  return state;\n};\nexport const click = state => event => {\n  const {\n    offsetX: x,\n    offsetY: y\n  } = event;\n  state.press = {\n    start: Date.now(),\n    pos: {\n      x,\n      y\n    }\n  };\n  return state;\n};\nconst collide = (o1, o2) => dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2);\nconst collideBoing = (p1, p2) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS);\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS);\n  const gx = -ny;\n  const gy = nx;\n  const v1g = gx * p1.dx + gy * p1.dy;\n  const v2n = nx * p2.dx + ny * p2.dy;\n  const v2g = gx * p2.dx + gy * p2.dy;\n  const v1n = nx * p1.dx + ny * p1.dy;\n  p1.dx = nx * v2n + gx * v1g;\n  p1.dy = ny * v2n + gy * v1g;\n  p2.dx = nx * v1n + gx * v2g;\n  p2.dy = ny * v1n + gy * v2g;\n  p1.x += p1.dx;\n  p1.y += p1.dy;\n  p2.x += p2.dx;\n  p2.y += p2.dy;\n};\nlet cpt = 0;\nlet t = 0.0;\nlet currentTime = Date.now();\nlet friction = 0.95;\nlet gravity = 10;\nlet auSol = false;\nexport const step = state => {\n  let newTime = Date.now();\n  let frameTime = newTime - currentTime;\n  currentTime = newTime;\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map(p2 => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--;\n          p1.invincible = 20;\n        }\n        if (!p2.invincible) {\n          p2.life--;\n          p2.invincible = 20;\n        }\n        collideBoing(p1.coord, p2.coord);\n      }\n    });\n  });\n\n  //if (frameTime > 1000/60) {\n\n  //newTime = currentTime - (frameTime % (1000/60));\n\n  document.addEventListener('keydown', event => {\n    var name = event.key;\n    if (name === 'z') {\n      if (state.joueur.velY > -state.joueur.speed) {\n        state.joueur.velY = -7;\n      }\n      //state.joueur.pos = perso.moveUp(state.joueur,frameTime)\n    }\n    /*\n    if(name==='s'){\n      if (state.joueur.velY < state.joueur.speed) {\n        state.joueur.velY=7;\n      }\n       //state.joueur.pos=perso.moveDown(state.joueur,frameTime)\n    }\n    */\n    if (name === 'q') {\n      if (state.joueur.velX > -state.joueur.speed) {\n        state.joueur.velX = -7;\n      }\n      //state.joueur.pos= perso.moveLeft(state.joueur,frameTime)\n    }\n\n    if (name === 'd') {\n      if (state.joueur.velX < state.joueur.speed) {\n        state.joueur.velX = 7;\n      }\n      // state.joueur.pos= perso.moveRight(state.joueur,frameTime)\n    }\n  }, false);\n  document.addEventListener('keyup', event => {\n    var name = event.key;\n    if (name === 'z') {\n      if (state.joueur.velY > -state.joueur.speed) {\n        state.joueur.velY = 0;\n      }\n      //state.joueur.pos = perso.moveUp(state.joueur,frameTime)\n    }\n    /*if(name==='s'){\n      if (state.joueur.velY < state.joueur.speed) {\n        state.joueur.velY=0;\n      }\n       //state.joueur.pos=perso.moveDown(state.joueur,frameTime)\n    }*/\n    if (name === 'q') {\n      if (state.joueur.velX > -state.joueur.speed) {\n        state.joueur.velX = 0;\n      }\n      //state.joueur.pos= perso.moveLeft(state.joueur,frameTime)\n    }\n\n    if (name === 'd') {\n      if (state.joueur.velX < state.joueur.speed) {\n        state.joueur.velX = 0;\n      }\n      // state.joueur.pos= perso.moveRight(state.joueur,frameTime)\n    }\n  }, false);\n\n  //}\n\n  //state.joueur.velY *= friction;\n  state.joueur.pos.y += state.joueur.velY;\n  //state.joueur.velX *= friction;\n  state.joueur.pos.x += state.joueur.velX;\n  state.joueur.pos.y += gravity;\n  if (state.joueur.pos.y > 500) {\n    state.joueur.pos.y = 500;\n    auSol = true;\n  }\n  if (state.player.invincible) state.player.invincible--;\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, state.player.coord);\n      if (!state.player.invincible) {\n        state.player.life--;\n        state.player.invincible = 20;\n      }\n      if (!p1.invincible) {\n        p1.life--;\n        p1.invincible = 20;\n      }\n    }\n  });\n  return {\n    ...state,\n    player: iterate(state.joueur)(state.size)(state.player),\n    pos: state.pos.map(iterate(state.joueur)(state.size)).filter(p => p.life > 0)\n  };\n};\nexport const mouseMove = state => event => {\n  return state;\n};\nexport const endOfGame = state => state.player.life > 0 && state.pos.length > 0;","map":{"version":3,"names":["conf","dist2","o1","o2","Math","pow","x","y","iterate","player","bound","ball","invincible","coord","dx","RADIUS","width","FRICTION","dy","height","abs","MINMOVE","clickEnd","state","_event","press","t","Date","now","start","pos","undefined","click","event","offsetX","offsetY","collide","collideBoing","p1","p2","nx","ny","gx","gy","v1g","v2n","v2g","v1n","cpt","currentTime","friction","gravity","auSol","step","newTime","frameTime","map","i","arr","slice","life","document","addEventListener","name","key","joueur","velY","speed","velX","size","filter","p","mouseMove","endOfGame","length"],"sources":["/users/nfs/Vrac/TME7CPAYANIS/proj/CPA/src/components/canvas/state.ts"],"sourcesContent":["import * as conf from './conf'\nimport * as perso from './game'\n\ntype Player = perso.Player\ntype CoordJoueur = perso.Coord\n\n\ntype Coord = { x: number; y: number; dx: number; dy: number }\ntype Ball = { coord: Coord; life: number; invincible?: number }\ntype Size = { height: number; width: number }\nexport type State = {\n  pos: Array<Ball>\n  press?: { start: number; pos: { x: number; y: number } }\n  size: Size\n  player: Ball\n  endOfGame: boolean\n  joueur : Player\n}\n\n//const jump = (joueur:Player) =>\n\n\nconst dist2 = (o1: Coord, o2: Coord) =>\n  Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2)\n\nconst iterate =\n  (player: Player) =>\n  (bound: Size) =>\n  (ball: Ball): Ball => {\n    const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible\n    const coord = ball.coord\n    const dx =\n      (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n        ? -coord.dx\n        : coord.dx) * conf.FRICTION\n    const dy =\n      (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n        ? -coord.dy\n        : coord.dy) * conf.FRICTION\n    if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE)\n      return { ...ball, invincible, coord: { ...coord, dx: 0, dy: 0 } }\n    return {\n      ...ball,\n      invincible,\n      coord: {\n        x: coord.x + dx,\n        y: coord.y + dy,\n        dx,\n        dy,\n      },\n    }\n  }\n\nexport const clickEnd =\n  (state: State) =>\n  (_event: PointerEvent): State => {\n    if (state.press) {\n      const t = (Date.now() - state.press.start) / 20000\n      const dx = state.player.coord.x - state.press.pos.x\n      const dy = state.player.coord.y - state.press.pos.y\n      state.player.coord.dx = state.player.coord.dx + dx * t\n      state.player.coord.dy = state.player.coord.dy + dy * t\n      state.press = undefined\n    }\n    return state\n  }\n\nexport const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX: x, offsetY: y } = event\n    state.press = { start: Date.now(), pos: { x, y } }\n    return state\n  }\n\nconst collide = (o1: Coord, o2: Coord) =>\n  dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2)\n\nconst collideBoing = (p1: Coord, p2: Coord) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS)\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS)\n  const gx = -ny\n  const gy = nx\n\n  const v1g = gx * p1.dx + gy * p1.dy\n  const v2n = nx * p2.dx + ny * p2.dy\n  const v2g = gx * p2.dx + gy * p2.dy\n  const v1n = nx * p1.dx + ny * p1.dy\n  p1.dx = nx * v2n + gx * v1g\n  p1.dy = ny * v2n + gy * v1g\n  p2.dx = nx * v1n + gx * v2g\n  p2.dy = ny * v1n + gy * v2g\n  p1.x += p1.dx\n  p1.y += p1.dy\n  p2.x += p2.dx\n  p2.y += p2.dy\n}\n\nlet cpt = 0\n\nlet t = 0.0;\n\nlet currentTime = Date.now()\n\nlet friction = 0.95\n\nlet gravity = 10\n\nlet auSol = false\n\n\nexport const step = (state: State) => {\n\n  \n\n  let newTime = Date.now();\n  let frameTime = newTime - currentTime;\n  currentTime = newTime;\n   \n\n\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map((p2) => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--\n          p1.invincible = 20\n        }\n        if (!p2.invincible) {\n          p2.life--\n          p2.invincible = 20\n        }\n        collideBoing(p1.coord, p2.coord)\n      }\n    })\n  })\n\n  //if (frameTime > 1000/60) {\n\n    //newTime = currentTime - (frameTime % (1000/60));\n\n    document.addEventListener('keydown', (event) => {\n      var name = event.key;\n  \n      if(name==='z'){\n        if (state.joueur.velY > -state.joueur.speed) {\n          state.joueur.velY = -7;\n        }\n        //state.joueur.pos = perso.moveUp(state.joueur,frameTime)\n      }\n      /*\n      if(name==='s'){\n        if (state.joueur.velY < state.joueur.speed) {\n          state.joueur.velY=7;\n        }\n         //state.joueur.pos=perso.moveDown(state.joueur,frameTime)\n      }\n      */\n      if(name==='q'){\n        if (state.joueur.velX > -state.joueur.speed) {\n          state.joueur.velX=-7;\n        }\n         //state.joueur.pos= perso.moveLeft(state.joueur,frameTime)\n      }\n      if(name==='d'){\n        if (state.joueur.velX < state.joueur.speed) {\n          state.joueur.velX=7;\n        }\n        // state.joueur.pos= perso.moveRight(state.joueur,frameTime)\n      }\n  \n    }, false);\n\n    document.addEventListener('keyup', (event) => {\n      var name = event.key;\n  \n      if(name==='z'){\n        if (state.joueur.velY > -state.joueur.speed) {\n          state.joueur.velY = 0;\n        }\n        //state.joueur.pos = perso.moveUp(state.joueur,frameTime)\n      }\n      /*if(name==='s'){\n        if (state.joueur.velY < state.joueur.speed) {\n          state.joueur.velY=0;\n        }\n         //state.joueur.pos=perso.moveDown(state.joueur,frameTime)\n      }*/\n      if(name==='q'){\n        if (state.joueur.velX > -state.joueur.speed) {\n          state.joueur.velX=0;\n        }\n         //state.joueur.pos= perso.moveLeft(state.joueur,frameTime)\n      }\n      if(name==='d'){\n        if (state.joueur.velX < state.joueur.speed) {\n          state.joueur.velX=0;\n        }\n        // state.joueur.pos= perso.moveRight(state.joueur,frameTime)\n      }\n  \n    }, false);\n\n\n  //}\n\n  //state.joueur.velY *= friction;\n  state.joueur.pos.y += state.joueur.velY;\n  //state.joueur.velX *= friction;\n  state.joueur.pos.x += state.joueur.velX;\n\n\n\n  state.joueur.pos.y += gravity;\n\n  if(state.joueur.pos.y > 500){\n    state.joueur.pos.y = 500\n    auSol = true\n  }\n\n  \n\n  if (state.player.invincible) state.player.invincible--\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, state.player.coord)\n      if (!state.player.invincible) {\n        state.player.life--\n        state.player.invincible = 20\n      }\n      if (!p1.invincible) {\n        p1.life--\n        p1.invincible = 20\n      }\n    }\n  })\n  return {\n    ...state,\n    player: iterate(state.joueur)(state.size)(state.player),\n    pos: state.pos.map(iterate(state.joueur)(state.size)).filter((p) => p.life > 0),\n  }\n}\n\nexport const mouseMove =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    return state\n  }\n\nexport const endOfGame = (state: State): boolean =>\n  state.player.life > 0 && state.pos.length > 0\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}