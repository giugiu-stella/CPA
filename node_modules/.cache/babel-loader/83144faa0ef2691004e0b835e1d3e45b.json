{"ast":null,"code":"import imageSol from './images/sol.png';\nimport imageCoeur from './images/coeur.png';\nimport imagePerso from './images/megaMan_static1.png';\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#008800',\n  BLUE: '#0000ff'\n};\nlet stateImageSol = false;\nlet stateImageCoeur = false;\nlet stateImagePerso = false;\nlet stateFond = false;\nconst imageCoeurUrl = new Image();\nconst imageSolUrl = new Image();\nconst imagePersoUrl = new Image();\nconst imageFond1 = new Image();\nimageCoeurUrl.src = imageCoeur;\nimageSolUrl.src = imageSol;\nimagePersoUrl.src = imagePerso;\nimageSolUrl.onload = () => {\n  stateImageSol = true;\n};\nimageCoeurUrl.onload = () => {\n  stateImageCoeur = true;\n};\nimagePersoUrl.onload = () => {\n  stateImagePerso = true;\n};\nconst toDoubleHexa = n => n < 16 ? '0' + n.toString(16) : n.toString(16);\nexport const rgbaTorgb = function (rgb) {\n  let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1];\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2];\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3];\n    r = parseInt(hexR, 16);\n    g = parseInt(hexG, 16);\n    b = parseInt(hexB, 16);\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '');\n    const splitted = val.split(',');\n    r = parseInt(splitted[0]);\n    g = parseInt(splitted[1]);\n    b = parseInt(splitted[2]);\n  }\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0);\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0);\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0);\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`;\n};\nconst clear = ctx => {\n  const {\n    height,\n    width\n  } = ctx.canvas;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n};\n/*\nexport type RenderProps = {\n  pos: { x: number; y: number }\n  scale: number\n}\n\nconst drawCirle = (\n  ctx: CanvasRenderingContext2D,\n  renderProps: RenderProps,\n  { x, y }: { x: number; y: number },\n  color: string\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.arc(\n    (x + renderProps.pos.x) * renderProps.scale,\n    (y + renderProps.pos.y) * renderProps.scale,\n    conf.RADIUS * renderProps.scale,\n    0,\n    2 * Math.PI\n  )\n  ctx.fill()\n}*/\n\nconst diplayGameText = ctx => state => {\n  /*ctx.font = '96px arial'\n  ctx.strokeText(`life ${state.player.life}`, 20, 100)\n  ctx.strokeText(\n    `balls life ${state.pos\n      .map((p) => p.life)\n      .reduce((acc, val) => acc + val, 0)}`,\n    20,\n    200\n  )*/\n  if (stateImageSol) ctx.drawImage(imageSolUrl, 0, 680, 500, 100);\n  ctx.drawImage(imageSolUrl, 495, 680, 500, 100);\n  ctx.drawImage(imageSolUrl, 990, 680, 500, 100);\n  if (stateImageCoeur) ctx.drawImage(imageCoeurUrl, 0, 0, 75, 75);\n  ctx.drawImage(imageCoeurUrl, 100, 0, 75, 75);\n  ctx.drawImage(imageCoeurUrl, 200, 0, 75, 75);\n};\nconst computeColor = (life, maxLife, baseColor) => rgbaTorgb(baseColor, (maxLife - life) * (1 / maxLife));\nexport const render = (ctx, plats) => state => {\n  clear(ctx);\n  diplayGameText(ctx)(state);\n  /*state.pos.map((c) =>\n    drawCirle(\n      ctx,\n      props,\n      c.coord,\n      computeColor(c.life, conf.BALLLIFE, COLORS.GREEN)\n    )\n  )\n  drawCirle(\n    ctx,\n    props,\n    state.player.coord,\n    computeColor(state.player.life, conf.PLAYERLIFE, COLORS.BLUE)\n  )*/\n  for (let i = 0; i < plats.length; i++) {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(plats[i].x, plats[i].y, plats[i].longueur, plats[i].largeur);\n  }\n\n  //console.log(plats[0][0])\n  if (stateImagePerso) {\n    ctx.drawImage(imagePersoUrl, state.joueur.pos.x, state.joueur.pos.y, 200, 200);\n  }\n\n  /*if (state.endOfGame) {\n    const text = 'END'\n    ctx.font = '48px'\n    ctx.strokeText(text, state.size.width / 2 - 100, state.size.height / 2)\n  }*/\n};","map":{"version":3,"names":["imageSol","imageCoeur","imagePerso","COLORS","RED","GREEN","BLUE","stateImageSol","stateImageCoeur","stateImagePerso","stateFond","imageCoeurUrl","Image","imageSolUrl","imagePersoUrl","imageFond1","src","onload","toDoubleHexa","n","toString","rgbaTorgb","rgb","alpha","arguments","length","undefined","r","g","b","startsWith","hexR","slice","hexG","hexB","parseInt","val","replace","splitted","split","Math","max","min","floor","clear","ctx","height","width","canvas","fillStyle","fillRect","diplayGameText","state","drawImage","computeColor","life","maxLife","baseColor","render","plats","i","x","y","longueur","largeur","joueur","pos"],"sources":["/users/nfs/Vrac/TME7CPAYANIS/proj/CPA/src/components/canvas/renderer.ts"],"sourcesContent":["import * as conf from './conf'\nimport { State } from './state'\nimport * as jeu from './game'\n\nimport imageSol from './images/sol.png'\nimport imageCoeur from './images/coeur.png'\nimport imagePerso from './images/megaMan_static1.png'\nimport fond from './images/background_1.png'\n\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#008800',\n  BLUE: '#0000ff',\n}\n\n\n\nlet stateImageSol = false\nlet stateImageCoeur = false\nlet stateImagePerso = false\nlet stateFond = false\n\nconst imageCoeurUrl = new Image();\nconst imageSolUrl = new Image();\nconst imagePersoUrl = new Image();\nconst imageFond1 = new Image();\n\nimageCoeurUrl.src = imageCoeur;\nimageSolUrl.src = imageSol;\nimagePersoUrl.src = imagePerso;\n\nimageSolUrl.onload = () => {\n  stateImageSol = true\n}\n\nimageCoeurUrl.onload = () => {\n  stateImageCoeur = true\n}\n\nimagePersoUrl.onload = () => {\n  stateImagePerso = true\n}\n\n\nconst toDoubleHexa = (n: number) =>\n  n < 16 ? '0' + n.toString(16) : n.toString(16)\n\nexport const rgbaTorgb = (rgb: string, alpha = 0) => {\n  let r = 0\n  let g = 0\n  let b = 0\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1]\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2]\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3]\n    r = parseInt(hexR, 16)\n    g = parseInt(hexG, 16)\n    b = parseInt(hexB, 16)\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '')\n    const splitted = val.split(',')\n    r = parseInt(splitted[0])\n    g = parseInt(splitted[1])\n    b = parseInt(splitted[2])\n  }\n\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0)\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0)\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0)\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`\n}\n\nconst clear = (ctx: CanvasRenderingContext2D) => {\n  const { height, width } = ctx.canvas\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n}\n/*\nexport type RenderProps = {\n  pos: { x: number; y: number }\n  scale: number\n}\n\nconst drawCirle = (\n  ctx: CanvasRenderingContext2D,\n  renderProps: RenderProps,\n  { x, y }: { x: number; y: number },\n  color: string\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.arc(\n    (x + renderProps.pos.x) * renderProps.scale,\n    (y + renderProps.pos.y) * renderProps.scale,\n    conf.RADIUS * renderProps.scale,\n    0,\n    2 * Math.PI\n  )\n  ctx.fill()\n}*/\n\nconst diplayGameText = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  \n  /*ctx.font = '96px arial'\n  ctx.strokeText(`life ${state.player.life}`, 20, 100)\n  ctx.strokeText(\n    `balls life ${state.pos\n      .map((p) => p.life)\n      .reduce((acc, val) => acc + val, 0)}`,\n    20,\n    200\n  )*/\n  if(stateImageSol)\n    ctx.drawImage(imageSolUrl,0,680,500,100);\n    ctx.drawImage(imageSolUrl,495,680,500,100);\n    ctx.drawImage(imageSolUrl,990,680,500,100);\n\n  if(stateImageCoeur)\n    ctx.drawImage(imageCoeurUrl,0,0,75,75);\n    ctx.drawImage(imageCoeurUrl,100,0,75,75);\n    ctx.drawImage(imageCoeurUrl,200,0,75,75);\n\n  \n\n}\n\nconst computeColor = (life: number, maxLife: number, baseColor: string) =>\n  rgbaTorgb(baseColor, (maxLife - life) * (1 / maxLife))\n\nexport const render =\n  (ctx: CanvasRenderingContext2D/*, props: RenderProps*/, plats: Array<jeu.Plateforme>) => (state: State) => {\n    clear(ctx)\n\n    diplayGameText(ctx)(state)\n    /*state.pos.map((c) =>\n      drawCirle(\n        ctx,\n        props,\n        c.coord,\n        computeColor(c.life, conf.BALLLIFE, COLORS.GREEN)\n      )\n    )\n    drawCirle(\n      ctx,\n      props,\n      state.player.coord,\n      computeColor(state.player.life, conf.PLAYERLIFE, COLORS.BLUE)\n    )*/\n    for(let i = 0; i<plats.length; i++){\n      ctx.fillStyle = 'black'\n      ctx.fillRect(plats[i].x, plats[i].y, plats[i].longueur, plats[i].largeur)\n    }\n    \n    //console.log(plats[0][0])\n    if(stateImagePerso){\n      ctx.drawImage(imagePersoUrl,state.joueur.pos.x,state.joueur.pos.y,200,200);\n    }\n    \n    /*if (state.endOfGame) {\n      const text = 'END'\n      ctx.font = '48px'\n      ctx.strokeText(text, state.size.width / 2 - 100, state.size.height / 2)\n    }*/\n  }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}