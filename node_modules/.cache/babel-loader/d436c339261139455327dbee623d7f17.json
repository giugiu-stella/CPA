{"ast":null,"code":"import * as conf from './conf';\nconst dist2 = (o1, o2) => Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2);\nconst iterate = bound => ball => {\n  const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible;\n  const coord = ball.coord;\n  const dx = (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS ? -coord.dx : coord.dx) * conf.FRICTION;\n  const dy = (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS ? -coord.dy : coord.dy) * conf.FRICTION;\n  if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE) return {\n    ...ball,\n    invincible,\n    coord: {\n      ...coord,\n      dx: 0,\n      dy: 0\n    }\n  };\n  return {\n    ...ball,\n    invincible,\n    coord: {\n      x: coord.x + dx,\n      y: coord.y + dy,\n      dx,\n      dy\n    }\n  };\n};\nexport const click = state => event => {\n  const {\n    offsetX,\n    offsetY\n  } = event;\n  const target = state.pos.find(p => dist2(p.coord, {\n    x: offsetX,\n    y: offsetY,\n    dx: 0,\n    dy: 0\n  }) < Math.pow(conf.RADIUS, 2) + 100);\n  if (target) {\n    target.coord.dx += Math.random() * 10;\n    target.coord.dy += Math.random() * 10;\n  }\n  return state;\n};\nconst collide = (o1, o2) => dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2);\nconst collideBoing = (p1, p2) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS);\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS);\n  const gx = -ny;\n  const gy = nx;\n  const v1g = gx * p1.dx + gy * p1.dy;\n  const v2n = nx * p2.dx + ny * p2.dy;\n  const v2g = gx * p2.dx + gy * p2.dy;\n  const v1n = nx * p1.dx + ny * p1.dy;\n  p1.dx = nx * v2n + gx * v1g;\n  p1.dy = ny * v2n + gy * v1g;\n  p2.dx = nx * v1n + gx * v2g;\n  p2.dy = ny * v1n + gy * v2g;\n  p1.x += p1.dx;\n  p1.y += p1.dy;\n  p2.x += p2.dx;\n  p2.y += p2.dy;\n};\nexport const step = state => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map(p2 => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--;\n          p1.invincible = 20;\n        }\n        if (!p2.invincible) {\n          p2.life--;\n          p2.invincible = 20;\n        }\n        collideBoing(p1.coord, p2.coord);\n      }\n    });\n  });\n  return {\n    ...state,\n    pos: state.pos.map(iterate(state.size)).filter(p => p.life > 0)\n  };\n};\nexport const mouseMove = state => event => {\n  return state;\n};\nexport const endOfGame = state => true;","map":{"version":3,"names":["conf","dist2","o1","o2","Math","pow","x","y","iterate","bound","ball","invincible","coord","dx","RADIUS","width","FRICTION","dy","height","abs","MINMOVE","click","state","event","offsetX","offsetY","target","pos","find","p","random","collide","collideBoing","p1","p2","nx","ny","gx","gy","v1g","v2n","v2g","v1n","step","map","i","arr","slice","life","size","filter","mouseMove","endOfGame"],"sources":["/home/yanis/FAC/CPAProjet/canvas/src/components/canvas/state.ts"],"sourcesContent":["import * as conf from './conf'\ntype Coord = { x: number; y: number; dx: number; dy: number }\ntype Ball = { coord: Coord; life: number; invincible?: number }\ntype Size = { height: number; width: number }\nexport type State = {\n  pos: Array<Ball>\n  size: Size\n  endOfGame: boolean\n}\n\nconst dist2 = (o1: Coord, o2: Coord) =>\n  Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2)\n\nconst iterate = (bound: Size) => (ball: Ball) => {\n  const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible\n  const coord = ball.coord\n  const dx =\n    (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n      ? -coord.dx\n      : coord.dx) * conf.FRICTION\n  const dy =\n    (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n      ? -coord.dy\n      : coord.dy) * conf.FRICTION\n  if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE)\n    return { ...ball, invincible, coord: { ...coord, dx: 0, dy: 0 } }\n  return {\n    ...ball,\n    invincible,\n    coord: {\n      x: coord.x + dx,\n      y: coord.y + dy,\n      dx,\n      dy,\n    },\n  }\n}\n\nexport const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX, offsetY } = event\n    const target = state.pos.find(\n      (p) =>\n        dist2(p.coord, { x: offsetX, y: offsetY, dx: 0, dy: 0 }) <\n        Math.pow(conf.RADIUS, 2) + 100\n    )\n    if (target) {\n      target.coord.dx += Math.random() * 10\n      target.coord.dy += Math.random() * 10\n    }\n    return state\n  }\n\nconst collide = (o1: Coord, o2: Coord) =>\n  dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2)\n\nconst collideBoing = (p1: Coord, p2: Coord) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS)\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS)\n  const gx = -ny\n  const gy = nx\n\n  const v1g = gx * p1.dx + gy * p1.dy\n  const v2n = nx * p2.dx + ny * p2.dy\n  const v2g = gx * p2.dx + gy * p2.dy\n  const v1n = nx * p1.dx + ny * p1.dy\n  p1.dx = nx * v2n + gx * v1g\n  p1.dy = ny * v2n + gy * v1g\n  p2.dx = nx * v1n + gx * v2g\n  p2.dy = ny * v1n + gy * v2g\n  p1.x += p1.dx\n  p1.y += p1.dy\n  p2.x += p2.dx\n  p2.y += p2.dy\n}\n\nexport const step = (state: State) => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map((p2) => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--\n          p1.invincible = 20\n        }\n        if (!p2.invincible) {\n          p2.life--\n          p2.invincible = 20\n        }\n        collideBoing(p1.coord, p2.coord)\n      }\n    })\n  })\n  return {\n    ...state,\n    pos: state.pos.map(iterate(state.size)).filter((p) => p.life > 0),\n  }\n}\n\nexport const mouseMove =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    return state\n  }\n\nexport const endOfGame = (state: State): boolean => true\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}