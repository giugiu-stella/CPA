{"ast":null,"code":"import * as conf from './conf';\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#008800',\n  BLUE: '#0000ff'\n};\nconst imageCoeur = new Image();\nimageCoeur.src = \"images/coeur.png\";\nconst toDoubleHexa = n => n < 16 ? '0' + n.toString(16) : n.toString(16);\nexport const rgbaTorgb = function (rgb) {\n  let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1];\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2];\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3];\n    r = parseInt(hexR, 16);\n    g = parseInt(hexG, 16);\n    b = parseInt(hexB, 16);\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '');\n    const splitted = val.split(',');\n    r = parseInt(splitted[0]);\n    g = parseInt(splitted[1]);\n    b = parseInt(splitted[2]);\n  }\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0);\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0);\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0);\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`;\n};\nconst clear = ctx => {\n  const {\n    height,\n    width\n  } = ctx.canvas;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n};\nconst drawCirle = (ctx, renderProps, _ref, color) => {\n  let {\n    x,\n    y\n  } = _ref;\n  ctx.beginPath();\n  ctx.fillStyle = color;\n  ctx.arc((x + renderProps.pos.x) * renderProps.scale, (y + renderProps.pos.y) * renderProps.scale, conf.RADIUS * renderProps.scale, 0, 2 * Math.PI);\n  ctx.fill();\n};\nconst diplayGameText = ctx => state => {\n  ctx.font = '96px arial';\n  ctx.strokeText(`life ${state.player.life}`, 20, 100);\n  ctx.strokeText(`balls life ${state.pos.map(p => p.life).reduce((acc, val) => acc + val, 0)}`, 20, 200);\n  ctx.drawImage(imageCoeur, 20, 100);\n};\nconst computeColor = (life, maxLife, baseColor) => rgbaTorgb(baseColor, (maxLife - life) * (1 / maxLife));\nexport const render = (ctx, props) => state => {\n  clear(ctx);\n  state.pos.map(c => drawCirle(ctx, props, c.coord, computeColor(c.life, conf.BALLLIFE, COLORS.GREEN)));\n  drawCirle(ctx, props, state.player.coord, computeColor(state.player.life, conf.PLAYERLIFE, COLORS.BLUE));\n  diplayGameText(ctx)(state);\n  if (state.endOfGame) {\n    const text = 'END';\n    ctx.font = '48px';\n    ctx.strokeText(text, state.size.width / 2 - 100, state.size.height / 2);\n  }\n};","map":{"version":3,"names":["conf","COLORS","RED","GREEN","BLUE","imageCoeur","Image","src","toDoubleHexa","n","toString","rgbaTorgb","rgb","alpha","arguments","length","undefined","r","g","b","startsWith","hexR","slice","hexG","hexB","parseInt","val","replace","splitted","split","Math","max","min","floor","clear","ctx","height","width","canvas","fillStyle","fillRect","drawCirle","renderProps","_ref","color","x","y","beginPath","arc","pos","scale","RADIUS","PI","fill","diplayGameText","state","font","strokeText","player","life","map","p","reduce","acc","drawImage","computeColor","maxLife","baseColor","render","props","c","coord","BALLLIFE","PLAYERLIFE","endOfGame","text","size"],"sources":["/users/nfs/Vrac/TME7CPAYANIS/proj/CPA/src/components/canvas/renderer.ts"],"sourcesContent":["import * as conf from './conf'\nimport { State } from './state'\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#008800',\n  BLUE: '#0000ff',\n}\n\nconst imageCoeur = new Image();\nimageCoeur.src = \"images/coeur.png\";\n\nconst toDoubleHexa = (n: number) =>\n  n < 16 ? '0' + n.toString(16) : n.toString(16)\n\nexport const rgbaTorgb = (rgb: string, alpha = 0) => {\n  let r = 0\n  let g = 0\n  let b = 0\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1]\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2]\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3]\n    r = parseInt(hexR, 16)\n    g = parseInt(hexG, 16)\n    b = parseInt(hexB, 16)\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '')\n    const splitted = val.split(',')\n    r = parseInt(splitted[0])\n    g = parseInt(splitted[1])\n    b = parseInt(splitted[2])\n  }\n\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0)\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0)\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0)\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`\n}\n\nconst clear = (ctx: CanvasRenderingContext2D) => {\n  const { height, width } = ctx.canvas\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n}\n\nexport type RenderProps = {\n  pos: { x: number; y: number }\n  scale: number\n}\n\nconst drawCirle = (\n  ctx: CanvasRenderingContext2D,\n  renderProps: RenderProps,\n  { x, y }: { x: number; y: number },\n  color: string\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.arc(\n    (x + renderProps.pos.x) * renderProps.scale,\n    (y + renderProps.pos.y) * renderProps.scale,\n    conf.RADIUS * renderProps.scale,\n    0,\n    2 * Math.PI\n  )\n  ctx.fill()\n}\n\nconst diplayGameText = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  \n  ctx.font = '96px arial'\n  ctx.strokeText(`life ${state.player.life}`, 20, 100)\n  ctx.strokeText(\n    `balls life ${state.pos\n      .map((p) => p.life)\n      .reduce((acc, val) => acc + val, 0)}`,\n    20,\n    200\n  )\n  ctx.drawImage(imageCoeur,20,100);\n\n}\n\nconst computeColor = (life: number, maxLife: number, baseColor: string) =>\n  rgbaTorgb(baseColor, (maxLife - life) * (1 / maxLife))\n\nexport const render =\n  (ctx: CanvasRenderingContext2D, props: RenderProps) => (state: State) => {\n    clear(ctx)\n    state.pos.map((c) =>\n      drawCirle(\n        ctx,\n        props,\n        c.coord,\n        computeColor(c.life, conf.BALLLIFE, COLORS.GREEN)\n      )\n    )\n    drawCirle(\n      ctx,\n      props,\n      state.player.coord,\n      computeColor(state.player.life, conf.PLAYERLIFE, COLORS.BLUE)\n    )\n    diplayGameText(ctx)(state)\n    if (state.endOfGame) {\n      const text = 'END'\n      ctx.font = '48px'\n      ctx.strokeText(text, state.size.width / 2 - 100, state.size.height / 2)\n    }\n  }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}