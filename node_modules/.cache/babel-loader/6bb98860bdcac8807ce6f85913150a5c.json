{"ast":null,"code":"import * as conf from './conf';\nconst dist2 = (o1, o2) => Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2);\nconst iterate = bound => ball => {\n  const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible;\n  const coord = ball.coord;\n  const dx = (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS ? -coord.dx : coord.dx) * conf.FRICTION;\n  const dy = (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS ? -coord.dy : coord.dy) * conf.FRICTION;\n  if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE) return {\n    ...ball,\n    invincible,\n    coord: {\n      ...coord,\n      dx: 0,\n      dy: 0\n    }\n  };\n  return {\n    ...ball,\n    invincible,\n    coord: {\n      x: coord.x + dx,\n      y: coord.y + dy,\n      dx,\n      dy\n    }\n  };\n};\nexport const clickEnd = state => _event => {\n  if (state.press) {\n    const t = (Date.now() - state.press.start) / 20000;\n    const dx = state.player.coord.x - state.press.pos.x;\n    const dy = state.player.coord.y - state.press.pos.y;\n    state.player.coord.dx = state.player.coord.dx + dx * t;\n    state.player.coord.dy = state.player.coord.dy + dy * t;\n    state.press = undefined;\n  }\n  return state;\n};\nexport const click = state => event => {\n  const {\n    offsetX: x,\n    offsetY: y\n  } = event;\n  state.press = {\n    start: Date.now(),\n    pos: {\n      x,\n      y\n    }\n  };\n  return state;\n};\nconst collide = (o1, o2) => dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2);\nconst collideBoing = (p1, p2) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS);\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS);\n  const gx = -ny;\n  const gy = nx;\n  const v1g = gx * p1.dx + gy * p1.dy;\n  const v2n = nx * p2.dx + ny * p2.dy;\n  const v2g = gx * p2.dx + gy * p2.dy;\n  const v1n = nx * p1.dx + ny * p1.dy;\n  p1.dx = nx * v2n + gx * v1g;\n  p1.dy = ny * v2n + gy * v1g;\n  p2.dx = nx * v1n + gx * v2g;\n  p2.dy = ny * v1n + gy * v2g;\n  p1.x += p1.dx;\n  p1.y += p1.dy;\n  p2.x += p2.dx;\n  p2.y += p2.dy;\n};\nexport const step = state => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map(p2 => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--;\n          p1.invincible = 20;\n        }\n        if (!p2.invincible) {\n          p2.life--;\n          p2.invincible = 20;\n        }\n        collideBoing(p1.coord, p2.coord);\n      }\n    });\n  });\n  if (state.player.invincible) state.player.invincible--;\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, state.player.coord);\n      if (!state.player.invincible) {\n        state.player.life--;\n        state.player.invincible = 20;\n      }\n      if (!p1.invincible) {\n        p1.life--;\n        p1.invincible = 20;\n      }\n    }\n  });\n  return {\n    ...state,\n    player: iterate(state.size)(state.player),\n    pos: state.pos.map(iterate(state.size)).filter(p => p.life > 0)\n  };\n};\nexport const mouseMove = state => event => {\n  return state;\n};\nexport const endOfGame = state => state.player.life > 0 && state.pos.length > 0;","map":{"version":3,"names":["conf","dist2","o1","o2","Math","pow","x","y","iterate","bound","ball","invincible","coord","dx","RADIUS","width","FRICTION","dy","height","abs","MINMOVE","clickEnd","state","_event","press","t","Date","now","start","player","pos","undefined","click","event","offsetX","offsetY","collide","collideBoing","p1","p2","nx","ny","gx","gy","v1g","v2n","v2g","v1n","step","map","i","arr","slice","life","size","filter","p","mouseMove","endOfGame","length"],"sources":["/users/nfs/Vrac/TME7CPAYANIS/proj/CPA/src/components/canvas/state.ts"],"sourcesContent":["import * as conf from './conf'\ntype Coord = { x: number; y: number; dx: number; dy: number }\ntype Ball = { coord: Coord; life: number; invincible?: number }\ntype Size = { height: number; width: number }\nexport type State = {\n  pos: Array<Ball>\n  press?: { start: number; pos: { x: number; y: number } }\n  size: Size\n  player: Ball\n  endOfGame: boolean\n}\n\nconst dist2 = (o1: Coord, o2: Coord) =>\n  Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2)\n\nconst iterate =\n  (bound: Size) =>\n  (ball: Ball): Ball => {\n    const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible\n    const coord = ball.coord\n    const dx =\n      (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n        ? -coord.dx\n        : coord.dx) * conf.FRICTION\n    const dy =\n      (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n        ? -coord.dy\n        : coord.dy) * conf.FRICTION\n    if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE)\n      return { ...ball, invincible, coord: { ...coord, dx: 0, dy: 0 } }\n    return {\n      ...ball,\n      invincible,\n      coord: {\n        x: coord.x + dx,\n        y: coord.y + dy,\n        dx,\n        dy,\n      },\n    }\n  }\n\nexport const clickEnd =\n  (state: State) =>\n  (_event: PointerEvent): State => {\n    if (state.press) {\n      const t = (Date.now() - state.press.start) / 20000\n      const dx = state.player.coord.x - state.press.pos.x\n      const dy = state.player.coord.y - state.press.pos.y\n      state.player.coord.dx = state.player.coord.dx + dx * t\n      state.player.coord.dy = state.player.coord.dy + dy * t\n      state.press = undefined\n    }\n    return state\n  }\n\nexport const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX: x, offsetY: y } = event\n    state.press = { start: Date.now(), pos: { x, y } }\n    return state\n  }\n\nconst collide = (o1: Coord, o2: Coord) =>\n  dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2)\n\nconst collideBoing = (p1: Coord, p2: Coord) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS)\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS)\n  const gx = -ny\n  const gy = nx\n\n  const v1g = gx * p1.dx + gy * p1.dy\n  const v2n = nx * p2.dx + ny * p2.dy\n  const v2g = gx * p2.dx + gy * p2.dy\n  const v1n = nx * p1.dx + ny * p1.dy\n  p1.dx = nx * v2n + gx * v1g\n  p1.dy = ny * v2n + gy * v1g\n  p2.dx = nx * v1n + gx * v2g\n  p2.dy = ny * v1n + gy * v2g\n  p1.x += p1.dx\n  p1.y += p1.dy\n  p2.x += p2.dx\n  p2.y += p2.dy\n}\n\nexport const step = (state: State) => {\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map((p2) => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--\n          p1.invincible = 20\n        }\n        if (!p2.invincible) {\n          p2.life--\n          p2.invincible = 20\n        }\n        collideBoing(p1.coord, p2.coord)\n      }\n    })\n  })\n  if (state.player.invincible) state.player.invincible--\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, state.player.coord)\n      if (!state.player.invincible) {\n        state.player.life--\n        state.player.invincible = 20\n      }\n      if (!p1.invincible) {\n        p1.life--\n        p1.invincible = 20\n      }\n    }\n  })\n  return {\n    ...state,\n    player: iterate(state.size)(state.player),\n    pos: state.pos.map(iterate(state.size)).filter((p) => p.life > 0),\n  }\n}\n\nexport const mouseMove =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    return state\n  }\n\nexport const endOfGame = (state: State): boolean =>\n  state.player.life > 0 && state.pos.length > 0\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}