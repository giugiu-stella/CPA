{"ast":null,"code":"import * as conf from './conf';\nexport var cptMarche = -1;\nconst jump = state => state.joueur.velY = -20;\nconst dist2 = (o1, o2) => Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2);\n\n/*const iterate =\n  (player: Player) =>\n  (bound: Size) =>\n  (ball: Ball): Ball => {\n    const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible\n    const coord = ball.coord\n    const dx =\n      (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n        ? -coord.dx\n        : coord.dx) * conf.FRICTION\n    const dy =\n      (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n        ? -coord.dy\n        : coord.dy) * conf.FRICTION\n    if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE)\n      return { ...ball, invincible, coord: { ...coord, dx: 0, dy: 0 } }\n    return {\n      ...ball,\n      invincible,\n      coord: {\n        x: coord.x + dx,\n        y: coord.y + dy,\n        dx,\n        dy,\n      },\n    }\n  }*/\n\nexport const clickEnd = state => _event => {\n  if (state.press) {\n    const t = (Date.now() - state.press.start) / 20000;\n    const dx = state.player.coord.x - state.press.pos.x;\n    const dy = state.player.coord.y - state.press.pos.y;\n    state.player.coord.dx = state.player.coord.dx + dx * t;\n    state.player.coord.dy = state.player.coord.dy + dy * t;\n    state.press = undefined;\n  }\n  return state;\n};\nexport const click = state => event => {\n  const {\n    offsetX: x,\n    offsetY: y\n  } = event;\n  state.press = {\n    start: Date.now(),\n    pos: {\n      x,\n      y\n    }\n  };\n  return state;\n};\nconst collide = (o1, o2) => dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2);\nconst collideBoing = (p1, p2) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS);\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS);\n  const gx = -ny;\n  const gy = nx;\n  const v1g = gx * p1.dx + gy * p1.dy;\n  const v2n = nx * p2.dx + ny * p2.dy;\n  const v2g = gx * p2.dx + gy * p2.dy;\n  const v1n = nx * p1.dx + ny * p1.dy;\n  p1.dx = nx * v2n + gx * v1g;\n  p1.dy = ny * v2n + gy * v1g;\n  p2.dx = nx * v1n + gx * v2g;\n  p2.dy = ny * v1n + gy * v2g;\n  p1.x += p1.dx;\n  p1.y += p1.dy;\n  p2.x += p2.dx;\n  p2.y += p2.dy;\n};\nlet cpt = 0;\nlet t = 0.0;\nlet currentTime = Date.now();\nlet friction = 0.95;\nlet gravity = 1.25;\nlet auSol = false;\nlet currenty = 0;\nlet previousy = 0;\nexport const step = state => {\n  console.log(state.platforms);\n  currenty = state.joueur.pos.y;\n  let newTime = Date.now();\n  let frameTime = newTime - currentTime;\n  currentTime = newTime;\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map(p2 => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--;\n          p1.invincible = 20;\n        }\n        if (!p2.invincible) {\n          p2.life--;\n          p2.invincible = 20;\n        }\n        collideBoing(p1.coord, p2.coord);\n      }\n    });\n  });\n\n  //if (frameTime > 1000/60) {\n\n  //newTime = currentTime - (frameTime % (1000/60));\n\n  document.addEventListener('keydown', event => {\n    var name = event.key;\n    if (name === 'z') {\n      if (auSol) {\n        jump(state);\n        //state.joueur.velY = -7;\n      }\n      //state.joueur.pos = perso.moveUp(state.joueur,frameTime)\n    }\n    /*\n    if(name==='s'){\n      if (state.joueur.velY < state.joueur.speed) {\n        state.joueur.velY=7;\n      }\n       //state.joueur.pos=perso.moveDown(state.joueur,frameTime)\n    }\n    */\n    if (name === 'q') {\n      if (state.joueur.velX > -state.joueur.speed) {\n        state.joueur.velX = -7;\n        cptMarche++;\n      }\n      //state.joueur.pos= perso.moveLeft(state.joueur,frameTime)\n    }\n\n    if (name === 'd') {\n      if (state.joueur.velX < state.joueur.speed) {\n        state.joueur.velX = 7;\n        cptMarche++;\n      }\n      // state.joueur.pos= perso.moveRight(state.joueur,frameTime)\n    }\n  }, false);\n  document.addEventListener('keyup', event => {\n    var name = event.key;\n\n    /*if(name==='z'){\n      if (state.joueur.velY > -state.joueur.speed) {\n        state.joueur.velY = 0;\n      }\n      //state.joueur.pos = perso.moveUp(state.joueur,frameTime)\n    }\n    if(name==='s'){\n      if (state.joueur.velY < state.joueur.speed) {\n        state.joueur.velY=0;\n      }\n       //state.joueur.pos=perso.moveDown(state.joueur,frameTime)\n    }*/\n    if (name === 'q') {\n      if (state.joueur.velX > -state.joueur.speed) {\n        state.joueur.velX = 0;\n        cptMarche = -1;\n      }\n      //state.joueur.pos= perso.moveLeft(state.joueur,frameTime)\n    }\n\n    if (name === 'd') {\n      if (state.joueur.velX < state.joueur.speed) {\n        state.joueur.velX = 0;\n        cptMarche = -1;\n      }\n      // state.joueur.pos= perso.moveRight(state.joueur,frameTime)\n    }\n  }, false);\n\n  //}\n\n  //state.joueur.velY *= friction;\n  state.joueur.pos.y += state.joueur.velY;\n  //state.joueur.velX *= friction;\n  state.joueur.pos.x += state.joueur.velX;\n  state.joueur.velY += gravity;\n  if (state.joueur.pos.y > 520) {\n    state.joueur.pos.y = 520;\n  }\n  console.log(state.joueur.pos.y);\n  if (currenty == previousy) {\n    auSol = true;\n  } else {\n    auSol = false;\n  }\n  previousy = currenty;\n  if (state.player.invincible) state.player.invincible--;\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, state.player.coord);\n      if (!state.player.invincible) {\n        state.player.life--;\n        state.player.invincible = 20;\n      }\n      if (!p1.invincible) {\n        p1.life--;\n        p1.invincible = 20;\n      }\n    }\n  });\n  return {\n    ...state\n    //player: iterate(state.joueur)(state.size)(state.player),\n    //pos: state.pos.map(iterate(state.joueur)(state.size)).filter((p) => p.life > 0),\n  };\n};\n\nexport const mouseMove = state => event => {\n  return state;\n};\nexport const endOfGame = state => state.player.life > 0 && state.pos.length > 0;","map":{"version":3,"names":["conf","cptMarche","jump","state","joueur","velY","dist2","o1","o2","Math","pow","x","y","clickEnd","_event","press","t","Date","now","start","dx","player","coord","pos","dy","undefined","click","event","offsetX","offsetY","collide","RADIUS","collideBoing","p1","p2","nx","ny","gx","gy","v1g","v2n","v2g","v1n","cpt","currentTime","friction","gravity","auSol","currenty","previousy","step","console","log","platforms","newTime","frameTime","map","i","arr","slice","invincible","life","document","addEventListener","name","key","velX","speed","mouseMove","endOfGame","length"],"sources":["/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/state.ts"],"sourcesContent":["import * as conf from './conf'\nimport * as jeu from './game'\n\ntype Player = jeu.Player\ntype Platform = jeu.Plateforme\n\n\ntype Coord = { x: number; y: number; dx: number; dy: number }\ntype Ball = { coord: Coord; life: number; invincible?: number }\ntype Size = { height: number; width: number }\nexport type State = {\n  pos: Array<Ball>\n  press?: { start: number; pos: { x: number; y: number } }\n  size: Size\n  player: Ball\n  endOfGame: boolean\n  joueur : Player\n  platforms: Array<Platform>\n}\n\nexport var cptMarche = -1\n\nconst jump = (state: State) =>\n  state.joueur.velY = -20;\n\n\n\nconst dist2 = (o1: Coord, o2: Coord) =>\n  Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2)\n\n/*const iterate =\n  (player: Player) =>\n  (bound: Size) =>\n  (ball: Ball): Ball => {\n    const invincible = ball.invincible ? ball.invincible - 1 : ball.invincible\n    const coord = ball.coord\n    const dx =\n      (coord.x + conf.RADIUS > bound.width || coord.x < conf.RADIUS\n        ? -coord.dx\n        : coord.dx) * conf.FRICTION\n    const dy =\n      (coord.y + conf.RADIUS > bound.height || coord.y < conf.RADIUS\n        ? -coord.dy\n        : coord.dy) * conf.FRICTION\n    if (Math.abs(dx) + Math.abs(dy) < conf.MINMOVE)\n      return { ...ball, invincible, coord: { ...coord, dx: 0, dy: 0 } }\n    return {\n      ...ball,\n      invincible,\n      coord: {\n        x: coord.x + dx,\n        y: coord.y + dy,\n        dx,\n        dy,\n      },\n    }\n  }*/\n\nexport const clickEnd =\n  (state: State) =>\n  (_event: PointerEvent): State => {\n    if (state.press) {\n      const t = (Date.now() - state.press.start) / 20000\n      const dx = state.player.coord.x - state.press.pos.x\n      const dy = state.player.coord.y - state.press.pos.y\n      state.player.coord.dx = state.player.coord.dx + dx * t\n      state.player.coord.dy = state.player.coord.dy + dy * t\n      state.press = undefined\n    }\n    return state\n  }\n\nexport const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX: x, offsetY: y } = event\n    state.press = { start: Date.now(), pos: { x, y } }\n    return state\n  }\n\nconst collide = (o1: Coord, o2: Coord) =>\n  dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2)\n\nconst collideBoing = (p1: Coord, p2: Coord) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS)\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS)\n  const gx = -ny\n  const gy = nx\n\n  const v1g = gx * p1.dx + gy * p1.dy\n  const v2n = nx * p2.dx + ny * p2.dy\n  const v2g = gx * p2.dx + gy * p2.dy\n  const v1n = nx * p1.dx + ny * p1.dy\n  p1.dx = nx * v2n + gx * v1g\n  p1.dy = ny * v2n + gy * v1g\n  p2.dx = nx * v1n + gx * v2g\n  p2.dy = ny * v1n + gy * v2g\n  p1.x += p1.dx\n  p1.y += p1.dy\n  p2.x += p2.dx\n  p2.y += p2.dy\n}\n\nlet cpt = 0\n\nlet t = 0.0;\n\nlet currentTime = Date.now()\n\nlet friction = 0.95\n\nlet gravity = 1.25\n\nlet auSol = false\n\nlet currenty = 0\n\nlet previousy = 0\n\n\nexport const step = (state: State) => {\n  console.log(state.platforms)\n\n  currenty = state.joueur.pos.y\n\n  let newTime = Date.now();\n  let frameTime = newTime - currentTime;\n  currentTime = newTime;\n   \n\n\n  state.pos.map((p1, i, arr) => {\n    arr.slice(i + 1).map((p2) => {\n      if (collide(p1.coord, p2.coord)) {\n        if (!p1.invincible) {\n          p1.life--\n          p1.invincible = 20\n        }\n        if (!p2.invincible) {\n          p2.life--\n          p2.invincible = 20\n        }\n        collideBoing(p1.coord, p2.coord)\n      }\n    })\n  })\n\n  //if (frameTime > 1000/60) {\n\n    //newTime = currentTime - (frameTime % (1000/60));\n\n    document.addEventListener('keydown', (event) => {\n      var name = event.key;\n  \n      if(name==='z'){\n        if (auSol) {\n          jump(state);\n          //state.joueur.velY = -7;\n        }\n        //state.joueur.pos = perso.moveUp(state.joueur,frameTime)\n      }\n      /*\n      if(name==='s'){\n        if (state.joueur.velY < state.joueur.speed) {\n          state.joueur.velY=7;\n        }\n         //state.joueur.pos=perso.moveDown(state.joueur,frameTime)\n      }\n      */\n      if(name==='q'){\n        if (state.joueur.velX > -state.joueur.speed) {\n          state.joueur.velX=-7;\n          cptMarche++\n        }\n         //state.joueur.pos= perso.moveLeft(state.joueur,frameTime)\n      }\n      if(name==='d'){\n        if (state.joueur.velX < state.joueur.speed) {\n          state.joueur.velX=7;\n          cptMarche++\n        }\n        // state.joueur.pos= perso.moveRight(state.joueur,frameTime)\n      }\n  \n    }, false);\n\n    document.addEventListener('keyup', (event) => {\n      var name = event.key;\n  \n      /*if(name==='z'){\n        if (state.joueur.velY > -state.joueur.speed) {\n          state.joueur.velY = 0;\n        }\n        //state.joueur.pos = perso.moveUp(state.joueur,frameTime)\n      }\n      if(name==='s'){\n        if (state.joueur.velY < state.joueur.speed) {\n          state.joueur.velY=0;\n        }\n         //state.joueur.pos=perso.moveDown(state.joueur,frameTime)\n      }*/\n      if(name==='q'){\n        if (state.joueur.velX > -state.joueur.speed) {\n          state.joueur.velX=0;\n          cptMarche = -1\n        }\n         //state.joueur.pos= perso.moveLeft(state.joueur,frameTime)\n      }\n      if(name==='d'){\n        if (state.joueur.velX < state.joueur.speed) {\n          state.joueur.velX=0;\n          cptMarche = -1\n        }\n        // state.joueur.pos= perso.moveRight(state.joueur,frameTime)\n      }\n  \n    }, false);\n\n\n  //}\n\n  //state.joueur.velY *= friction;\n  state.joueur.pos.y += state.joueur.velY;\n  //state.joueur.velX *= friction;\n  state.joueur.pos.x += state.joueur.velX;\n\n\n  \n\n  state.joueur.velY += gravity;\n\n  if(state.joueur.pos.y > 520){\n    state.joueur.pos.y = 520\n  }\n\n  console.log(state.joueur.pos.y)\n\n  if(currenty == previousy){\n    auSol = true\n  }\n  else{\n    auSol = false\n  }\n\n  previousy = currenty\n\n\n  \n\n  if (state.player.invincible) state.player.invincible--\n  state.pos.map((p1, i) => {\n    if (collide(p1.coord, state.player.coord)) {\n      collideBoing(p1.coord, state.player.coord)\n      if (!state.player.invincible) {\n        state.player.life--\n        state.player.invincible = 20\n      }\n      if (!p1.invincible) {\n        p1.life--\n        p1.invincible = 20\n      }\n    }\n  })\n  return {\n    ...state,\n    //player: iterate(state.joueur)(state.size)(state.player),\n    //pos: state.pos.map(iterate(state.joueur)(state.size)).filter((p) => p.life > 0),\n  }\n}\n\nexport const mouseMove =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    return state\n  }\n\nexport const endOfGame = (state: State): boolean =>\n  state.player.life > 0 && state.pos.length > 0\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}