{"ast":null,"code":"import { cptMarche } from './state';\nimport imageSol from './images/sol.png';\nimport imageCoeur from './images/coeur.png';\nimport imagePerso from './images/megaMan_static1.png';\nimport fond1 from './images/background_1.png';\nimport fond2 from './images/background_2.png';\nimport fond3 from './images/background_3.png';\nimport fond4 from './images/background_4.png';\nimport marche1 from './images/megaMan_run1.png';\nimport marche2 from './images/megaMan_run2.png';\nimport marche3 from './images/megaMan_run3.png';\nimport marche4 from './images/megaMan_run4.png';\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#008800',\n  BLUE: '#0000ff'\n};\nlet frame = 0;\nlet stateImageSol = false;\nlet stateImageCoeur = false;\nlet stateImagePerso = false;\nlet stateFond = false;\nconst imageCoeurUrl = new Image();\nconst imageSolUrl = new Image();\nconst imagePersoUrl = new Image();\nconst imageFond1Url = new Image();\nconst imageFond2Url = new Image();\nconst imageFond3Url = new Image();\nconst imageFond4Url = new Image();\nconst imageMarche1Url = new Image();\nconst imageMarche2Url = new Image();\nconst imageMarche3Url = new Image();\nconst imageMarche4Url = new Image();\nimageCoeurUrl.src = imageCoeur;\nimageSolUrl.src = imageSol;\nimagePersoUrl.src = imagePerso;\nimageFond1Url.src = fond1;\nimageFond2Url.src = fond2;\nimageFond3Url.src = fond3;\nimageFond4Url.src = fond4;\nimageMarche1Url.src = marche1;\nimageMarche2Url.src = marche2;\nimageMarche3Url.src = marche3;\nimageMarche4Url.src = marche4;\nimageSolUrl.onload = () => {\n  stateImageSol = true;\n};\nimageCoeurUrl.onload = () => {\n  stateImageCoeur = true;\n};\nimagePersoUrl.onload = () => {\n  stateImagePerso = true;\n};\nimageFond1Url.onload = () => {\n  stateFond = true;\n};\nconst toDoubleHexa = n => n < 16 ? '0' + n.toString(16) : n.toString(16);\nexport const rgbaTorgb = function (rgb) {\n  let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1];\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2];\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3];\n    r = parseInt(hexR, 16);\n    g = parseInt(hexG, 16);\n    b = parseInt(hexB, 16);\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '');\n    const splitted = val.split(',');\n    r = parseInt(splitted[0]);\n    g = parseInt(splitted[1]);\n    b = parseInt(splitted[2]);\n  }\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0);\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0);\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0);\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`;\n};\nconst clear = ctx => {\n  const {\n    height,\n    width\n  } = ctx.canvas;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n};\n/*\nexport type RenderProps = {\n  pos: { x: number; y: number }\n  scale: number\n}\n\nconst drawCirle = (\n  ctx: CanvasRenderingContext2D,\n  renderProps: RenderProps,\n  { x, y }: { x: number; y: number },\n  color: string\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.arc(\n    (x + renderProps.pos.x) * renderProps.scale,\n    (y + renderProps.pos.y) * renderProps.scale,\n    conf.RADIUS * renderProps.scale,\n    0,\n    2 * Math.PI\n  )\n  ctx.fill()\n}*/\n\nconst diplayImages = ctx => state => {\n  /*ctx.font = '96px arial'\n  ctx.strokeText(`life ${state.player.life}`, 20, 100)\n  ctx.strokeText(\n    `balls life ${state.pos\n      .map((p) => p.life)\n      .reduce((acc, val) => acc + val, 0)}`,\n    20,\n    200\n  )*/\n  if (stateFond) {\n    if (frame < 5) ctx.drawImage(imageFond1Url, 0, -200, 1400, 1000);else if (frame >= 5 && frame < 10) ctx.drawImage(imageFond2Url, 0, -200, 1400, 1000);else if (frame >= 10 && frame < 15) ctx.drawImage(imageFond3Url, 0, -200, 1400, 1000);else {\n      ctx.drawImage(imageFond4Url, 0, -200, 1400, 1000);\n    }\n  }\n  if (stateImageSol) ctx.drawImage(imageSolUrl, 0, 680, 500, 100);\n  ctx.drawImage(imageSolUrl, 495, 680, 500, 100);\n  ctx.drawImage(imageSolUrl, 990, 680, 500, 100);\n  if (stateImageCoeur) ctx.drawImage(imageCoeurUrl, 0, 0, 75, 75);\n  ctx.drawImage(imageCoeurUrl, 100, 0, 75, 75);\n  ctx.drawImage(imageCoeurUrl, 200, 0, 75, 75);\n  if (stateImagePerso) {\n    console.log(cptMarche);\n    let cptTmp = cptMarche % 60;\n    if (cptTmp == -1) ctx.drawImage(imagePersoUrl, state.joueur.pos.x, state.joueur.pos.y, 200, 200);else if (cptTmp < 15) ctx.drawImage(imageMarche1Url, state.joueur.pos.x, state.joueur.pos.y, 200, 200);else if (cptTmp >= 15 && cptTmp < 30) ctx.drawImage(imageMarche2Url, state.joueur.pos.x, state.joueur.pos.y, 200, 200);else if (cptTmp >= 30 && cptTmp < 45) ctx.drawImage(imageMarche3Url, state.joueur.pos.x, state.joueur.pos.y, 200, 200);else {\n      ctx.drawImage(imageMarche4Url, state.joueur.pos.x, state.joueur.pos.y, 200, 200);\n    }\n  }\n};\nconst computeColor = (life, maxLife, baseColor) => rgbaTorgb(baseColor, (maxLife - life) * (1 / maxLife));\nexport const render = (ctx, plats) => state => {\n  clear(ctx);\n  frame++;\n  frame = frame % 20;\n  diplayImages(ctx)(state);\n  /*state.pos.map((c) =>\n    drawCirle(\n      ctx,\n      props,\n      c.coord,\n      computeColor(c.life, conf.BALLLIFE, COLORS.GREEN)\n    )\n  )\n  drawCirle(\n    ctx,\n    props,\n    state.player.coord,\n    computeColor(state.player.life, conf.PLAYERLIFE, COLORS.BLUE)\n  )*/\n  for (let i = 0; i < plats.length; i++) {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(plats[i].x, plats[i].y, plats[i].longueur, plats[i].largeur);\n  }\n\n  //console.log(plats[0][0])\n\n  /*if (state.endOfGame) {\n    const text = 'END'\n    ctx.font = '48px'\n    ctx.strokeText(text, state.size.width / 2 - 100, state.size.height / 2)\n  }*/\n};","map":{"version":3,"names":["cptMarche","imageSol","imageCoeur","imagePerso","fond1","fond2","fond3","fond4","marche1","marche2","marche3","marche4","COLORS","RED","GREEN","BLUE","frame","stateImageSol","stateImageCoeur","stateImagePerso","stateFond","imageCoeurUrl","Image","imageSolUrl","imagePersoUrl","imageFond1Url","imageFond2Url","imageFond3Url","imageFond4Url","imageMarche1Url","imageMarche2Url","imageMarche3Url","imageMarche4Url","src","onload","toDoubleHexa","n","toString","rgbaTorgb","rgb","alpha","arguments","length","undefined","r","g","b","startsWith","hexR","slice","hexG","hexB","parseInt","val","replace","splitted","split","Math","max","min","floor","clear","ctx","height","width","canvas","fillStyle","fillRect","diplayImages","state","drawImage","console","log","cptTmp","joueur","pos","x","y","computeColor","life","maxLife","baseColor","render","plats","i","longueur","largeur"],"sources":["/Users/giulianicarla/Documents/GitHub/CPA/src/components/canvas/renderer.ts"],"sourcesContent":["import * as conf from './conf'\nimport { State } from './state'\nimport * as jeu from './game'\n\nimport {cptMarche} from './state'\n\nimport imageSol from './images/sol.png'\nimport imageCoeur from './images/coeur.png'\nimport imagePerso from './images/megaMan_static1.png'\nimport fond1 from './images/background_1.png'\nimport fond2 from './images/background_2.png'\nimport fond3 from './images/background_3.png'\nimport fond4 from './images/background_4.png'\n\nimport marche1 from './images/megaMan_run1.png'\nimport marche2 from './images/megaMan_run2.png'\nimport marche3 from './images/megaMan_run3.png'\nimport marche4 from './images/megaMan_run4.png'\n\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#008800',\n  BLUE: '#0000ff',\n}\n\n\nlet frame = 0\n\nlet stateImageSol = false\nlet stateImageCoeur = false\nlet stateImagePerso = false\nlet stateFond = false\n\nconst imageCoeurUrl = new Image();\nconst imageSolUrl = new Image();\nconst imagePersoUrl = new Image();\nconst imageFond1Url = new Image();\nconst imageFond2Url = new Image();\nconst imageFond3Url = new Image();\nconst imageFond4Url = new Image();\nconst imageMarche1Url = new Image();\nconst imageMarche2Url = new Image();\nconst imageMarche3Url = new Image();\nconst imageMarche4Url = new Image();\n\nimageCoeurUrl.src = imageCoeur;\nimageSolUrl.src = imageSol;\nimagePersoUrl.src = imagePerso;\nimageFond1Url.src = fond1;\nimageFond2Url.src = fond2;\nimageFond3Url.src = fond3;\nimageFond4Url.src = fond4;\nimageMarche1Url.src = marche1;\nimageMarche2Url.src = marche2;\nimageMarche3Url.src = marche3;\nimageMarche4Url.src = marche4;\n\nimageSolUrl.onload = () => {\n  stateImageSol = true\n}\n\nimageCoeurUrl.onload = () => {\n  stateImageCoeur = true\n}\n\nimagePersoUrl.onload = () => {\n  stateImagePerso = true\n}\n\nimageFond1Url.onload = () => {\n  stateFond = true\n}\n\n\nconst toDoubleHexa = (n: number) =>\n  n < 16 ? '0' + n.toString(16) : n.toString(16)\n\nexport const rgbaTorgb = (rgb: string, alpha = 0) => {\n  let r = 0\n  let g = 0\n  let b = 0\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1]\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2]\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3]\n    r = parseInt(hexR, 16)\n    g = parseInt(hexG, 16)\n    b = parseInt(hexB, 16)\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '')\n    const splitted = val.split(',')\n    r = parseInt(splitted[0])\n    g = parseInt(splitted[1])\n    b = parseInt(splitted[2])\n  }\n\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0)\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0)\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0)\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`\n}\n\nconst clear = (ctx: CanvasRenderingContext2D) => {\n  const { height, width } = ctx.canvas\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n}\n/*\nexport type RenderProps = {\n  pos: { x: number; y: number }\n  scale: number\n}\n\nconst drawCirle = (\n  ctx: CanvasRenderingContext2D,\n  renderProps: RenderProps,\n  { x, y }: { x: number; y: number },\n  color: string\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.arc(\n    (x + renderProps.pos.x) * renderProps.scale,\n    (y + renderProps.pos.y) * renderProps.scale,\n    conf.RADIUS * renderProps.scale,\n    0,\n    2 * Math.PI\n  )\n  ctx.fill()\n}*/\n\nconst diplayImages = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  \n  \n  /*ctx.font = '96px arial'\n  ctx.strokeText(`life ${state.player.life}`, 20, 100)\n  ctx.strokeText(\n    `balls life ${state.pos\n      .map((p) => p.life)\n      .reduce((acc, val) => acc + val, 0)}`,\n    20,\n    200\n  )*/\n  if(stateFond){\n    if(frame<5)\n      ctx.drawImage(imageFond1Url,0,-200,1400,1000)\n    else if (frame>=5 && frame < 10)\n      ctx.drawImage(imageFond2Url,0,-200,1400,1000)\n    else if (frame>=10 && frame < 15)\n      ctx.drawImage(imageFond3Url,0,-200,1400,1000)\n    else{\n      ctx.drawImage(imageFond4Url,0,-200,1400,1000)\n    }\n  }\n  if(stateImageSol)\n    ctx.drawImage(imageSolUrl,0,680,500,100);\n    ctx.drawImage(imageSolUrl,495,680,500,100);\n    ctx.drawImage(imageSolUrl,990,680,500,100);\n\n  if(stateImageCoeur)\n    ctx.drawImage(imageCoeurUrl,0,0,75,75);\n    ctx.drawImage(imageCoeurUrl,100,0,75,75);\n    ctx.drawImage(imageCoeurUrl,200,0,75,75);\n\n  if(stateImagePerso){\n    console.log(cptMarche)\n    let cptTmp = cptMarche%60\n    if(cptTmp==-1)\n      ctx.drawImage(imagePersoUrl,state.joueur.pos.x,state.joueur.pos.y,200,200);\n    else if(cptTmp<15)\n      ctx.drawImage(imageMarche1Url,state.joueur.pos.x,state.joueur.pos.y,200,200)\n    else if (cptTmp>=15 && cptTmp < 30)\n      ctx.drawImage(imageMarche2Url,state.joueur.pos.x,state.joueur.pos.y,200,200)\n    else if (cptTmp>=30 && cptTmp < 45)\n      ctx.drawImage(imageMarche3Url,state.joueur.pos.x,state.joueur.pos.y,200,200)\n    else{\n      ctx.drawImage(imageMarche4Url,state.joueur.pos.x,state.joueur.pos.y,200,200)\n    }\n  }\n\n  \n\n  \n\n}\n\nconst computeColor = (life: number, maxLife: number, baseColor: string) =>\n  rgbaTorgb(baseColor, (maxLife - life) * (1 / maxLife))\n\nexport const render =\n  (ctx: CanvasRenderingContext2D/*, props: RenderProps*/, plats: Array<jeu.Plateforme>) => (state: State) => {\n    clear(ctx)\n    frame ++\n    frame = frame%20\n\n    diplayImages(ctx)(state)\n    /*state.pos.map((c) =>\n      drawCirle(\n        ctx,\n        props,\n        c.coord,\n        computeColor(c.life, conf.BALLLIFE, COLORS.GREEN)\n      )\n    )\n    drawCirle(\n      ctx,\n      props,\n      state.player.coord,\n      computeColor(state.player.life, conf.PLAYERLIFE, COLORS.BLUE)\n    )*/\n    for(let i = 0; i<plats.length; i++){\n      ctx.fillStyle = 'black'\n      ctx.fillRect(plats[i].x, plats[i].y, plats[i].longueur, plats[i].largeur)\n    }\n    \n    //console.log(plats[0][0])\n    \n    /*if (state.endOfGame) {\n      const text = 'END'\n      ctx.font = '48px'\n      ctx.strokeText(text, state.size.width / 2 - 100, state.size.height / 2)\n    }*/\n  }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}