{"ast":null,"code":"import * as conf from './conf';\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#00ff00',\n  BLUE: '#0000ff'\n};\nconst toDoubleHexa = n => n < 16 ? '0' + n.toString(16) : n.toString(16);\nexport const rgbaTorgb = function (rgb) {\n  let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1];\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2];\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3];\n    r = parseInt(hexR, 16);\n    g = parseInt(hexG, 16);\n    b = parseInt(hexB, 16);\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '');\n    const splitted = val.split(',');\n    r = parseInt(splitted[0]);\n    g = parseInt(splitted[1]);\n    b = parseInt(splitted[2]);\n  }\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0);\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0);\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0);\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`;\n};\nconst clear = ctx => {\n  const {\n    height,\n    width\n  } = ctx.canvas;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n};\nconst drawCirle = (ctx, _ref, color) => {\n  let {\n    x,\n    y\n  } = _ref;\n  ctx.beginPath();\n  ctx.fillStyle = color;\n  ctx.arc(x, y, conf.RADIUS, 0, 2 * Math.PI);\n  ctx.fill();\n};\nconst computeColor = (life, maxLife, baseColor) => rgbaTorgb(baseColor, (maxLife - life) * (1 / maxLife));\nexport const render = ctx => state => {\n  clear(ctx);\n  state.pos.map(c => drawCirle(ctx, c.coord, computeColor(c.life, conf.BALLLIFE, COLORS.RED)));\n  if (state.endOfGame) {\n    const text = 'END';\n    ctx.font = '48px arial';\n    ctx.strokeText(text, state.size.width / 2 - 200, state.size.height / 2);\n  }\n};","map":{"version":3,"names":["conf","COLORS","RED","GREEN","BLUE","toDoubleHexa","n","toString","rgbaTorgb","rgb","alpha","arguments","length","undefined","r","g","b","startsWith","hexR","slice","hexG","hexB","parseInt","val","replace","splitted","split","Math","max","min","floor","clear","ctx","height","width","canvas","fillStyle","fillRect","drawCirle","_ref","color","x","y","beginPath","arc","RADIUS","PI","fill","computeColor","life","maxLife","baseColor","render","state","pos","map","c","coord","BALLLIFE","endOfGame","text","font","strokeText","size"],"sources":["/home/yanis/FAC/CPAProjet/canvas/src/components/canvas/renderer.ts"],"sourcesContent":["import * as conf from './conf'\nimport { State } from './state'\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#00ff00',\n  BLUE: '#0000ff',\n}\n\nconst toDoubleHexa = (n: number) =>\n  n < 16 ? '0' + n.toString(16) : n.toString(16)\n\nexport const rgbaTorgb = (rgb: string, alpha = 0) => {\n  let r = 0\n  let g = 0\n  let b = 0\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1]\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2]\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3]\n    r = parseInt(hexR, 16)\n    g = parseInt(hexG, 16)\n    b = parseInt(hexB, 16)\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '')\n    const splitted = val.split(',')\n    r = parseInt(splitted[0])\n    g = parseInt(splitted[1])\n    b = parseInt(splitted[2])\n  }\n\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0)\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0)\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0)\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`\n}\n\nconst clear = (ctx: CanvasRenderingContext2D) => {\n  const { height, width } = ctx.canvas\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n}\n\nconst drawCirle = (\n  ctx: CanvasRenderingContext2D,\n  { x, y }: { x: number; y: number },\n  color: string\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.arc(x, y, conf.RADIUS, 0, 2 * Math.PI)\n  ctx.fill()\n}\n\nconst computeColor = (life: number, maxLife: number, baseColor: string) =>\n  rgbaTorgb(baseColor, (maxLife - life) * (1 / maxLife))\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  clear(ctx)\n\n  state.pos.map((c) =>\n    drawCirle(ctx, c.coord, computeColor(c.life, conf.BALLLIFE, COLORS.RED))\n  )\n\n  if (state.endOfGame) {\n    const text = 'END'\n    ctx.font = '48px arial'\n    ctx.strokeText(text, state.size.width / 2 - 200, state.size.height / 2)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}